<!DOCTYPE html>
<html lang="en" class="h-100">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="description" content="" />
    <meta
      name="author"
      content="Mark Otto, Jacob Thornton, and Bootstrap contributors"
    />
    <meta name="generator" content="Hugo 0.98.0" />
    <title>Lets Do it</title>
    <link
      rel="canonical"
      href="https://getbootstrap.com/docs/5.2/examples/cover/"
    />
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0-beta1/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-0evHe/X+R7YkIZDRvuzKMRqM+OrBnVFBL6DOitfPri4tjfHxaWutUpFmBp4vmVor"
      crossorigin="anonymous"
    />
    <link
      rel="apple-touch-icon"
      href="/docs/5.2/assets/img/favicons/apple-touch-icon.png"
      sizes="180x180"
    />
    <link
      rel="icon"
      href="/docs/5.2/assets/img/favicons/favicon-32x32.png"
      sizes="32x32"
      type="image/png"
    />
    <link
      rel="icon"
      href="/docs/5.2/assets/img/favicons/favicon-16x16.png"
      sizes="16x16"
      type="image/png"
    />
    <link rel="manifest" href="/docs/5.2/assets/img/favicons/manifest.json" />
    <link
      rel="mask-icon"
      href="/docs/5.2/assets/img/favicons/safari-pinned-tab.svg"
      color="#712cf9"
    />
    <link rel="icon" href="/docs/5.2/assets/img/favicons/favicon.ico" />
    <meta name="theme-color" content="#712cf9" />

    <style>
      body {
        background: linear-gradient(120deg, #e0c3fc 0%, #8ec5fc 100%);
        width: 100vw;
        height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
      }

      .b-example-divider {
        height: 3rem;
        background-color: rgba(0, 0, 0, 0.1);
        border: solid rgba(0, 0, 0, 0.15);
        border-width: 1px 0;
        box-shadow: inset 0 0.5em 1.5em rgba(0, 0, 0, 0.1),
          inset 0 0.125em 0.5em rgba(0, 0, 0, 0.15);
      }

      .b-example-vr {
        flex-shrink: 0;
        width: 1.5rem;
        height: 100vh;
      }

      .bi {
        vertical-align: -0.125em;
        fill: currentColor;
      }

      .nav-scroller {
        position: relative;
        z-index: 2;
        height: 2.75rem;
        overflow-y: hidden;
      }

      .nav-scroller .nav {
        display: flex;
        flex-wrap: nowrap;
        padding-bottom: 1rem;
        margin-top: -1px;
        overflow-x: auto;
        text-align: center;
        white-space: nowrap;
        -webkit-overflow-scrolling: touch;
      }
      main {
        text-align: center;
        padding-bottom: 800px;
      }

      * {
        padding: 0;
        margin: 0;
        box-sizing: border-box;
      }

      :root {
        --header-height: 150px;
      }

      .container {
        background: transparent;
        width: 700px;
        height: 600px;
        position: relative;
        overflow: hidden;
        border-radius: 10px;
      }
      .new-todo {
        width: 100%;
        height: 50px;
        padding: 0.25rem 0;
      }
      .new-todo form {
        display: flex;
        align-items: center;
      }
      .new-todo form input {
        flex: 1;
        height: 40px;
        background-color: transparent;
        border: none;
        border-right: 0px;
        outline: transparent;
        padding-left: 0.5rem;
        font-size: 1rem;
        color: #000000;
      }
      .new-todo form button {
        width: 60px;
        height: 40px;
        font-size: 1.5rem;
        background-color: transparent;
        color: rgb(0, 0, 0);
        border: none;
        border-left: 0px;
        cursor: pointer;
        outline: rgb(15, 7, 7);
      }
      .new-todo form button:hover {
        text-shadow: 1px 1px 20px rgba(0, 0, 0, 0.8);
      }
      #todos-list {
        height: 400px;
        background: transparent;
        padding: 0.5rem;
        border: none;
        overflow: hidden;
        border-radius: 10px;
        color: black;
      }

      #todos-list .todo {
        display: flex;
        align-items: center;
        padding: 0.75rem 0.5rem;
        border-radius: 10px;
      }
      #todos-list .todo:hover {
        background-color: rgba(146, 84, 221, 0.1);
      }
      #todos-list .todo * {
        cursor: pointer;
        margin-right: 0.5rem;
      }
      #todos-list .todo i {
        font-size: 0.9rem;
      }
      #todos-list .todo p {
        flex: 1;
        word-break: break-all;
      }
      .checked {
        text-decoration: line-through;
        color: rgb(1, 1, 1);
      }
      #todos-list .todo .bi-pencil-square {
        color: rgb(0, 0, 0);
      }
      #todos-list .todo .bi-trash {
        color: rgb(0, 0, 0);
        margin: 0;
      }

      .notification {
        position: absolute;
        width: calc(3 * var(--contaier-width) / 4);
        height: 60px;
        display: flex;
        justify-content: center;
        align-items: center;
        opacity: 0.9;
        border-radius: 8px;
        background-color: rgb(0, 0, 0);
        top: 10px;
        right: calc(-3 * var(--contaier-width) / 4);
        color: #fff;
        transition: 300ms right ease-in-out;
      }

      .notif-enter {
        right: 10px;
      }
    </style>

    <!-- Custom styles for this template -->
    <link href="cover.css" rel="stylesheet" />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.3/font/bootstrap-icons.css"
    />
    <link rel="stylesheet" href="style.css" />

    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Playfair:wght@600&display=swap"
      rel="stylesheet"
    />
  </head>
  <body class="d-flex h-100 text-center text-white bg-white">
    <div class="container d-flex w-100 h-100 p-3 mx-auto flex-column">
      <header class="mb-auto">
        <div>
          <nav class="nav nav-masthead justify-content-center float-md-end">
            <form action="/logout?_method=DELETE" method="POST">
              <button
                class="nav-link fw-bold py-1 px-0 btn p=3 btn-dark text-white"
                type="submit"
              >
                Logout
              </button>
            </form>
          </nav>
        </div>
      </header>
      <div class="container">
        <main class="px-3">
          <h1 class="text-dark">Hello <%= name %></h1>
          <p class="lead text-dark">What are we doing today?</p>
          <header class="todo">
            <div class="new-todo">
              <form id="todoform">
                <input
                  type="text"
                  name="newtodo"
                  id="newtodo"
                  placeholder="Don't Forget To ..."
                />
                <button type="submit">
                  <i class="bi bi-plus-circle-fill"></i>
                </button>
              </form>
            </div>
          </header>
          <div id="todos-list">
            <!-- <div class="todo" id="0">
          <i class="bi bi-circle"></i>
          <i class="bi bi-check-circle-fill"></i>
          <p class="">Go get milk.</p>
          <i class="bi bi-pencil-square"></i>
          <i class="bi bi-trash"></i>
        </div> -->
          </div>
          <div class="notification"></div>
        </main>
      </div>
    </div>
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0-beta1/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-pprn3073KE6tl6bjs2QrFaJGz5/SUsLqktiwsUTF55Jfv3qYSDhgCecCxMW52nD2"
      crossorigin="anonymous"
    ></script>
    <script>
      // SELECT ELEMENTS
      const form = document.getElementById("todoform");
      const todoInput = document.getElementById("newtodo");
      const todosListEl = document.getElementById("todos-list");
      const notificationEl = document.querySelector(".notification");
      const sqlite3 = require("sqlite3").verbose();

      //sqlite database
      const db = new sqlite3.Database("./todolist.db", (err) => {
        if (err) {
          console.error(err.message);
        } else {
          console.log("Connected to the SQLite database.");
        }
      });

      // 1st render
      renderTodos();

      // FORM SUBMIT
      form.addEventListener("submit", function (event) {
        event.preventDefault();

        saveTodo();
        renderTodos();
      });

      // SAVE TODO
      function saveTodo() {
        const todoValue = todoInput.value;

        // check if the todo is empty
        const isEmpty = todoValue === "";

        // check for duplicate todos
        const isDuplicateQuery =
          "SELECT COUNT(*) AS count FROM tasks WHERE description = ?";
        db.get(isDuplicateQuery, [todoValue], (err, row) => {
          if (err) {
            showNotification("An error occurred");
          } else {
            const isDuplicate = row.count > 0;

            if (isEmpty) {
              showNotification("Todo's input is empty");
            } else if (isDuplicate) {
              showNotification("Todo already exists!");
            } else {
              const insertQuery =
                "INSERT INTO tasks (description, status) VALUES (?, ?)";
              const status = "incomplete";

              db.run(insertQuery, [todoValue, status], (err) => {
                if (err) {
                  showNotification("An error occurred");
                } else {
                  todoInput.value = "";
                  showNotification("Todo added successfully");
                  renderTodos();
                }
              });
            }
          }
        });
      }

      // RENDER TODOS
      function renderTodos() {
        const selectQuery = "SELECT * FROM tasks ORDER BY id ASC";
        db.all(selectQuery, (err, rows) => {
          if (err) {
            showNotification("An error occurred");
          } else {
            if (rows.length === 0) {
              todosListEl.innerHTML = "<center>Nothing to do!</center>";
            } else {
              todosListEl.innerHTML = rows
                .map(
                  (row) => `
        <div class="todo" id=${row.id}>
          <i class="bi ${
            row.status === "complete" ? "bi-check-circle-fill" : "bi-circle"
          }" style="color: ${row.color}" data-action="check"></i>
          <p class="${
            row.status === "complete" ? "checked" : ""
          }" data-action="check">${row.description}</p>
          <i class="bi bi-pencil-square" data-action="edit"></i>
          <i class="bi bi-trash" data-action="delete"></i>
        </div>
        `
                )
                .join("");
            }
          }
        });
      }

      // CLICK EVENT LISTENER FOR ALL THE TODOS
      todosListEl.addEventListener("click", (event) => {
        const target = event.target;
        const parentElement = target.parentNode;

        if (parentElement.className !== "todo") return;

        // t o d o id
        const todo = parentElement;
        const todoId = Number(todo.id);

        // target action
        const action = target.dataset.action;

        action === "check" && checkTodo(todoId);
        action === "edit" && editTodo(todoId);
        action === "delete" && deleteTodo(todoId);
      });

      // CHECK A TODO
      function checkTodo(todoId) {
        const updateQuery = `UPDATE tasks SET status = CASE WHEN status = 'complete' THEN 'incomplete' ELSE 'complete' END WHERE id = ?`;
        db.run(updateQuery, [todoId], (err) => {
          if (err) {
            showNotification("An error occurred");
          } else {
            renderTodos();
            showNotification("Todo updated successfully");
          }
        });
      }

      // EDIT A TODO
      function editTodo(todoId) {
        const selectQuery = `SELECT description FROM tasks WHERE id = ?`;
        db.get(selectQuery, [todoId], (err, row) => {
          if (err) {
            showNotification("An error occurred");
          } else {
            if (row) {
              todoInput.value = row.description;
            }
          }
        });
      }

      // DELETE TODO
      function deleteTodo(todoId) {
        const deleteQuery = `DELETE FROM tasks WHERE id = ?`;
        db.run(deleteQuery, [todoId], (err) => {
          if (err) {
            showNotification("An error occurred");
          } else {
            renderTodos();
            showNotification("Todo deleted successfully");
          }
        });
      }

      // SHOW A NOTIFICATION
      function showNotification(msg) {
        // change the message
        notificationEl.innerHTML = msg;

        // notification enter
        notificationEl.classList.add("notif-enter");

        // notification leave
        setTimeout(() => {
          notificationEl.classList.remove("notif-enter");
        }, 2000);
      }
    </script>
  </body>
</html>
